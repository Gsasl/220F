import java.io.*;
import java.util.*;

public class DFSOrder {
    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        int N = fr.nextInt(), M = fr.nextInt();
        int[] U = new int[M], V = new int[M];
        for (int i = 0; i < M; i++) U[i] = fr.nextInt();
        for (int i = 0; i < M; i++) V[i] = fr.nextInt();

        int[] deg = new int[N + 1];
        for (int i = 0; i < M; i++) { deg[U[i]]++; deg[V[i]]++; }
        int[] start = new int[N + 2];
        for (int u = 1; u <= N; u++) start[u + 1] = start[u] + deg[u];
        int[] to = new int[2 * M], ptr = Arrays.copyOf(start, N + 2);
        for (int i = 0; i < M; i++) {
            to[ptr[U[i]]++] = V[i];
            to[ptr[V[i]]++] = U[i];
        }
        for (int u = 1; u <= N; u++) Arrays.sort(to, start[u], start[u + 1]);

        boolean[] vis = new boolean[N + 1];
        int[] stack = new int[N];
        int[] cur = Arrays.copyOf(start, N + 2);
        int sp = 0; StringBuilder sb = new StringBuilder();

        vis[1] = true; stack[sp++] = 1; sb.append(1).append(' ');
        while (sp > 0) {
            int u = stack[sp - 1], i = cur[u], end = start[u + 1];
            while (i < end && vis[to[i]]) i++;
            cur[u] = i;
            if (i == end) sp--;
            else {
                int v = to[i];
                cur[u] = i + 1;
                vis[v] = true;
                stack[sp++] = v;
                sb.append(v).append(' ');
            }
        }
        System.out.println(sb.toString().trim());
    }
    static class FastReader {
        private final DataInputStream in = new DataInputStream(System.in);
        private final byte[] buf = new byte[1 << 16]; int ptr = 0, len = 0;
        private int read() throws IOException {
            if (ptr >= len) { ptr = 0; len = in.read(buf); if (len == -1) return -1; }
            return buf[ptr++] & 0xFF;
        }
        int nextInt() throws IOException {
            int c; do { c = read(); } while (c <= ' ' && c != -1);
            boolean neg = (c == '-'); if (neg) c = read(); int x = 0;
            for (; c >= '0' && c <= '9'; c = read()) x = x * 10 + (c - '0');
            return neg ? -x : x;
        }
    }
}
