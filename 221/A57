import java.io.*;
import java.util.*;

public class MaxDiamonds {
    static int R, C; static char[][] grid; static boolean[][] vis;
    static final int[] dr = {-1, 1, 0, 0}, dc = {0, 0, -1, 1};
    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        R = fr.nextInt(); C = fr.nextInt();
        grid = new char[R][C]; for (int i = 0; i < R; i++) grid[i] = fr.next().toCharArray();
        vis = new boolean[R][C];
        int max = 0;
        for (int i = 0; i < R; i++)
            for (int j = 0; j < C; j++)
                if (!vis[i][j] && grid[i][j] != '#')
                    max = Math.max(max, bfs(i, j));
        System.out.println(max);
    }
    static int bfs(int sr, int sc) {
        int cnt = 0; ArrayDeque<int[]> q = new ArrayDeque<>();
        vis[sr][sc] = true; q.add(new int[]{sr, sc});
        while (!q.isEmpty()) {
            int[] cur = q.poll(); int r = cur[0], c = cur[1];
            if (grid[r][c] == 'D') cnt++;
            for (int k = 0; k < 4; k++) {
                int nr = r + dr[k], nc = c + dc[k];
                if (nr>=0 && nr<R && nc>=0 && nc<C && !vis[nr][nc] && grid[nr][nc] != '#') {
                    vis[nr][nc] = true; q.add(new int[]{nr, nc});
                }
            }
        }
        return cnt;
    }
    static class FastReader { private final DataInputStream in = new DataInputStream(System.in);
        private final byte[] buf = new byte[1 << 16]; int ptr = 0, len = 0;
        private int read() throws IOException {
            if (ptr >= len) { ptr = 0; len = in.read(buf); if (len == -1) return -1; }
            return buf[ptr++] & 0xFF; }
}
