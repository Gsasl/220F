import java.io.*;
import java.util.*;

public class DirectedCycle {
    static int N, M, edgeCnt; 
    static int[] head, to, next; 
    static byte[] state; 
    static boolean hasCycle = false;
    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        N = fr.nextInt(); M = fr.nextInt();
        head = new int[N + 1]; Arrays.fill(head, -1);
        to = new int[M]; next = new int[M];
        edgeCnt = 0;
        for (int i = 0; i < M; i++) add(fr.nextInt(), fr.nextInt());
        state = new byte[N + 1];
        for (int i = 1; i <= N && !hasCycle; i++)
            if (state[i] == 0) dfs(i);
        System.out.println(hasCycle ? "YES" : "NO");
    }
    static void add(int u, int v) {
        to[edgeCnt] = v; next[edgeCnt] = head[u]; head[u] = edgeCnt++;
    }
    static void dfs(int u) {
        state[u] = 1;
        for (int e = head[u]; e != -1; e = next[e]) {
            int v = to[e];
            if (state[v] == 0) dfs(v);
            else if (state[v] == 1) { hasCycle = true; return; }
            if (hasCycle) return;
        }
        state[u] = 2;
    }
    static class FastReader { /* same fast reader as before */ }
}
